CS168 
BITTORRENT CLIENT

login : hc121, hs48


1 ) Tracker / Parsing Meta info
    Once client adds a torrent, we parse the torrent file to get tracker url and info dict. We use golang "bencode-go" library to parse bencoded text from tracker server. After we receive port and IP's of all peers, we establish TCP connection with each peers and conduct bittorent handshake. 

    Each Peer Struct in our design has 4 variables, remote/local interested and remote/local choked. All requests are sent if and only if remote choke is set to false and local interest variable is set to true. 

    After conducting handshake with peers, we start a new thread that sends keep alive message every 2 minutes. 
    




2) Downloading 
 - dividing work among peers 
    We use link list as a datastructure to divide work among peers. Once all peers are done with handshake and once we have received unchoke from the peers, we put all data blocks of all pieces in a single linked list. 

    Everytime, we handle "unchoke" or "request message" , we traverse the linked list from the head and see if remote peer's bitmap contains piece of the block. Then, we send request for the following block and remove block from the linked list. 

    Since multiple threads will be accessing / removing from the linked list, we used mutex to enforce consistency. 



 - avoiding already downloaded piece 
    As soon as torrent is downloaded, we check if file already exists in our downloaded directory. If file does not exist, or if SHA1 calculation does not match 20-length string given from the tracker, we mark that piece as not downloaded. 

    We only insert blocks into linked list of blocks to request if the piece corresponding to the block is not downloaded. Therefore, if all pieces are downloaded, our bittorent client will not start the downloading process, and automatically start seeding. 




 - queue implementation for lower latency  
    To lower latency, we keep a queue of request sent to each peer. We set queue size of 20 blocks and the resulting latency is approximately 0.5 MB per second. Everytime, we receive a piece from the remote peer, we delete the corresponding block from the queue , and everytime we request a new block to remote peer, we add the block to the queue. 


 - After download is complete 
    Everytime, each piece is completely downloaded, we send having message to all the peers. 
    When all the files are downloaded, we send HTTP GET request to tracker with "event" key being "completed"
    This enables us to start seeding to other peers. 




3) piece  - File Mapping 
    Each torrent contains a map of piece index - piece. Each Piece struct contains a list of files that represents where each piece's bytes are located within the file. Therefore, given each piece index and offset, we can retrieve corresponding file data. 
    Also, each piece contains a block bitmap that represents whether particular block is downloaded or not. Thus, whenever each block is downloaded, we check if given piece's block bitmap is all 1's. If so, this means that all blocks are downloaded and we write the data to file location. 



4) Seeding 
    Once client adds torrent, we start to (i) download or (ii) if completed seed. Seeding works based on the fact that the files do exists and are verified. 

    Once downloaded, we send the tracker Id that we have the files. Seeding begins when a peer begins handshake and requests a block. We already have a ‘fileList’ per piece, specifying which part of the files the piece is ranges. We seek to the part that we need, read the number of bytes necessary, and send off to the peer.

 
