CS168 
BITTORRENT CLIENT

login : hc121, hs48


1 ) Tracker / Parsing Meta info
    Once client adds a torrent, we parse the torrent file to get tracker url and info dict. We use golang "bencode-go" library to parse bencoded text from tracker server. After we receive port and IP's of all peers, we establish TCP connection with each peers and conduct bittorent handshake. 

    Each Peer Struct in our design has 4 variables, remote/local interested and remote/local choked. All requests are sent if and only if remote choke is set to false and local interest variable is set to true. 

    After conducting handshake with peers, we start a new thread that sends keep alive message every 2 minutes. 
    




2) Downloading 
 - dividing work among peers 
    We use link list as a datastructure to divide work among peers. Once all peers are done with handshake and once we have received unchoke from the peers, we put all data blocks of all pieces in a single linked list. 

    Everytime, we handle "unchoke" or "request message" , we traverse the linked list from the head and see if remote peer's bitmap contains piece of the block. Then, we send request for the following block and remove block from the linked list. 

    Since multiple threads will be accessing / removing from the linked list, we used mutex to enforce consistency. 



 - avoiding already downloaded piece 
    As soon as torrent is downloaded, we check if file already exists in our downloaded directory. 




 - queue implementation for lower latency  





3) Seeding 


 
